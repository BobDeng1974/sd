// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: settingsu3d2dms.proto

#ifndef PROTOBUF_INCLUDED_settingsu3d2dms_2eproto
#define PROTOBUF_INCLUDED_settingsu3d2dms_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_settingsu3d2dms_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_settingsu3d2dms_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_settingsu3d2dms_2eproto();
class Settings;
class SettingsDefaultTypeInternal;
extern SettingsDefaultTypeInternal _Settings_default_instance_;
namespace google {
namespace protobuf {
template<> ::Settings* Arena::CreateMaybeMessage<::Settings>(Arena*);
}  // namespace protobuf
}  // namespace google

enum ActionType {
  CALIB = 0,
  REGIST = 1,
  MOUTH_THRESH = 2,
  YAWN_ALARM_TIME = 3,
  LEFT_EYE_THRESH = 4,
  RIGHT_EYE_THRESH = 5,
  DOZE_ALARM_TIME = 6,
  PHONE_ALARM_TIME = 7,
  SMOKING_ALARM_TIME = 8
};
bool ActionType_IsValid(int value);
const ActionType ActionType_MIN = CALIB;
const ActionType ActionType_MAX = SMOKING_ALARM_TIME;
const int ActionType_ARRAYSIZE = ActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActionType_descriptor();
inline const ::std::string& ActionType_Name(ActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActionType_descriptor(), value);
}
inline bool ActionType_Parse(
    const ::std::string& name, ActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActionType>(
    ActionType_descriptor(), name, value);
}
// ===================================================================

class Settings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Settings) */ {
 public:
  Settings();
  virtual ~Settings();

  Settings(const Settings& from);

  inline Settings& operator=(const Settings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Settings(Settings&& from) noexcept
    : Settings() {
    *this = ::std::move(from);
  }

  inline Settings& operator=(Settings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Settings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Settings* internal_default_instance() {
    return reinterpret_cast<const Settings*>(
               &_Settings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Settings* other);
  friend void swap(Settings& a, Settings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Settings* New() const final {
    return CreateMaybeMessage<Settings>(nullptr);
  }

  Settings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Settings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Settings& from);
  void MergeFrom(const Settings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Settings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ActionType actions = 1;
  int actions_size() const;
  void clear_actions();
  static const int kActionsFieldNumber = 1;
  ::ActionType actions(int index) const;
  void set_actions(int index, ::ActionType value);
  void add_actions(::ActionType value);
  const ::google::protobuf::RepeatedField<int>& actions() const;
  ::google::protobuf::RepeatedField<int>* mutable_actions();

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional float mouth_thresh = 3;
  bool has_mouth_thresh() const;
  void clear_mouth_thresh();
  static const int kMouthThreshFieldNumber = 3;
  float mouth_thresh() const;
  void set_mouth_thresh(float value);

  // optional float yawn_alarm_time = 4;
  bool has_yawn_alarm_time() const;
  void clear_yawn_alarm_time();
  static const int kYawnAlarmTimeFieldNumber = 4;
  float yawn_alarm_time() const;
  void set_yawn_alarm_time(float value);

  // optional float left_eye_thresh = 5;
  bool has_left_eye_thresh() const;
  void clear_left_eye_thresh();
  static const int kLeftEyeThreshFieldNumber = 5;
  float left_eye_thresh() const;
  void set_left_eye_thresh(float value);

  // optional float right_eye_thresh = 6;
  bool has_right_eye_thresh() const;
  void clear_right_eye_thresh();
  static const int kRightEyeThreshFieldNumber = 6;
  float right_eye_thresh() const;
  void set_right_eye_thresh(float value);

  // optional float doze_alarm_time = 7;
  bool has_doze_alarm_time() const;
  void clear_doze_alarm_time();
  static const int kDozeAlarmTimeFieldNumber = 7;
  float doze_alarm_time() const;
  void set_doze_alarm_time(float value);

  // optional float phone_alarm_time = 8;
  bool has_phone_alarm_time() const;
  void clear_phone_alarm_time();
  static const int kPhoneAlarmTimeFieldNumber = 8;
  float phone_alarm_time() const;
  void set_phone_alarm_time(float value);

  // optional float smoking_alarm_time = 9;
  bool has_smoking_alarm_time() const;
  void clear_smoking_alarm_time();
  static const int kSmokingAlarmTimeFieldNumber = 9;
  float smoking_alarm_time() const;
  void set_smoking_alarm_time(float value);

  // optional float left_distraction_limit = 10;
  bool has_left_distraction_limit() const;
  void clear_left_distraction_limit();
  static const int kLeftDistractionLimitFieldNumber = 10;
  float left_distraction_limit() const;
  void set_left_distraction_limit(float value);

  // optional float right_distraction_limit = 11;
  bool has_right_distraction_limit() const;
  void clear_right_distraction_limit();
  static const int kRightDistractionLimitFieldNumber = 11;
  float right_distraction_limit() const;
  void set_right_distraction_limit(float value);

  // optional float down_distraction_limit = 12;
  bool has_down_distraction_limit() const;
  void clear_down_distraction_limit();
  static const int kDownDistractionLimitFieldNumber = 12;
  float down_distraction_limit() const;
  void set_down_distraction_limit(float value);

  // optional float up_distraction_limit = 13;
  bool has_up_distraction_limit() const;
  void clear_up_distraction_limit();
  static const int kUpDistractionLimitFieldNumber = 13;
  float up_distraction_limit() const;
  void set_up_distraction_limit(float value);

  // @@protoc_insertion_point(class_scope:Settings)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField<int> actions_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  float mouth_thresh_;
  float yawn_alarm_time_;
  float left_eye_thresh_;
  float right_eye_thresh_;
  float doze_alarm_time_;
  float phone_alarm_time_;
  float smoking_alarm_time_;
  float left_distraction_limit_;
  float right_distraction_limit_;
  float down_distraction_limit_;
  float up_distraction_limit_;
  friend struct ::TableStruct_settingsu3d2dms_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Settings

// repeated .ActionType actions = 1;
inline int Settings::actions_size() const {
  return actions_.size();
}
inline void Settings::clear_actions() {
  actions_.Clear();
}
inline ::ActionType Settings::actions(int index) const {
  // @@protoc_insertion_point(field_get:Settings.actions)
  return static_cast< ::ActionType >(actions_.Get(index));
}
inline void Settings::set_actions(int index, ::ActionType value) {
  assert(::ActionType_IsValid(value));
  actions_.Set(index, value);
  // @@protoc_insertion_point(field_set:Settings.actions)
}
inline void Settings::add_actions(::ActionType value) {
  assert(::ActionType_IsValid(value));
  actions_.Add(value);
  // @@protoc_insertion_point(field_add:Settings.actions)
}
inline const ::google::protobuf::RepeatedField<int>&
Settings::actions() const {
  // @@protoc_insertion_point(field_list:Settings.actions)
  return actions_;
}
inline ::google::protobuf::RepeatedField<int>*
Settings::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:Settings.actions)
  return &actions_;
}

// optional string name = 2;
inline bool Settings::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Settings::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& Settings::name() const {
  // @@protoc_insertion_point(field_get:Settings.name)
  return name_.GetNoArena();
}
inline void Settings::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Settings.name)
}
#if LANG_CXX11
inline void Settings::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Settings.name)
}
#endif
inline void Settings::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Settings.name)
}
inline void Settings::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Settings.name)
}
inline ::std::string* Settings::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Settings.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Settings::release_name() {
  // @@protoc_insertion_point(field_release:Settings.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Settings::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Settings.name)
}

// optional float mouth_thresh = 3;
inline bool Settings::has_mouth_thresh() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Settings::clear_mouth_thresh() {
  mouth_thresh_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Settings::mouth_thresh() const {
  // @@protoc_insertion_point(field_get:Settings.mouth_thresh)
  return mouth_thresh_;
}
inline void Settings::set_mouth_thresh(float value) {
  _has_bits_[0] |= 0x00000002u;
  mouth_thresh_ = value;
  // @@protoc_insertion_point(field_set:Settings.mouth_thresh)
}

// optional float yawn_alarm_time = 4;
inline bool Settings::has_yawn_alarm_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Settings::clear_yawn_alarm_time() {
  yawn_alarm_time_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Settings::yawn_alarm_time() const {
  // @@protoc_insertion_point(field_get:Settings.yawn_alarm_time)
  return yawn_alarm_time_;
}
inline void Settings::set_yawn_alarm_time(float value) {
  _has_bits_[0] |= 0x00000004u;
  yawn_alarm_time_ = value;
  // @@protoc_insertion_point(field_set:Settings.yawn_alarm_time)
}

// optional float left_eye_thresh = 5;
inline bool Settings::has_left_eye_thresh() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Settings::clear_left_eye_thresh() {
  left_eye_thresh_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Settings::left_eye_thresh() const {
  // @@protoc_insertion_point(field_get:Settings.left_eye_thresh)
  return left_eye_thresh_;
}
inline void Settings::set_left_eye_thresh(float value) {
  _has_bits_[0] |= 0x00000008u;
  left_eye_thresh_ = value;
  // @@protoc_insertion_point(field_set:Settings.left_eye_thresh)
}

// optional float right_eye_thresh = 6;
inline bool Settings::has_right_eye_thresh() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Settings::clear_right_eye_thresh() {
  right_eye_thresh_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Settings::right_eye_thresh() const {
  // @@protoc_insertion_point(field_get:Settings.right_eye_thresh)
  return right_eye_thresh_;
}
inline void Settings::set_right_eye_thresh(float value) {
  _has_bits_[0] |= 0x00000010u;
  right_eye_thresh_ = value;
  // @@protoc_insertion_point(field_set:Settings.right_eye_thresh)
}

// optional float doze_alarm_time = 7;
inline bool Settings::has_doze_alarm_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Settings::clear_doze_alarm_time() {
  doze_alarm_time_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Settings::doze_alarm_time() const {
  // @@protoc_insertion_point(field_get:Settings.doze_alarm_time)
  return doze_alarm_time_;
}
inline void Settings::set_doze_alarm_time(float value) {
  _has_bits_[0] |= 0x00000020u;
  doze_alarm_time_ = value;
  // @@protoc_insertion_point(field_set:Settings.doze_alarm_time)
}

// optional float phone_alarm_time = 8;
inline bool Settings::has_phone_alarm_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Settings::clear_phone_alarm_time() {
  phone_alarm_time_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float Settings::phone_alarm_time() const {
  // @@protoc_insertion_point(field_get:Settings.phone_alarm_time)
  return phone_alarm_time_;
}
inline void Settings::set_phone_alarm_time(float value) {
  _has_bits_[0] |= 0x00000040u;
  phone_alarm_time_ = value;
  // @@protoc_insertion_point(field_set:Settings.phone_alarm_time)
}

// optional float smoking_alarm_time = 9;
inline bool Settings::has_smoking_alarm_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Settings::clear_smoking_alarm_time() {
  smoking_alarm_time_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float Settings::smoking_alarm_time() const {
  // @@protoc_insertion_point(field_get:Settings.smoking_alarm_time)
  return smoking_alarm_time_;
}
inline void Settings::set_smoking_alarm_time(float value) {
  _has_bits_[0] |= 0x00000080u;
  smoking_alarm_time_ = value;
  // @@protoc_insertion_point(field_set:Settings.smoking_alarm_time)
}

// optional float left_distraction_limit = 10;
inline bool Settings::has_left_distraction_limit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Settings::clear_left_distraction_limit() {
  left_distraction_limit_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float Settings::left_distraction_limit() const {
  // @@protoc_insertion_point(field_get:Settings.left_distraction_limit)
  return left_distraction_limit_;
}
inline void Settings::set_left_distraction_limit(float value) {
  _has_bits_[0] |= 0x00000100u;
  left_distraction_limit_ = value;
  // @@protoc_insertion_point(field_set:Settings.left_distraction_limit)
}

// optional float right_distraction_limit = 11;
inline bool Settings::has_right_distraction_limit() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Settings::clear_right_distraction_limit() {
  right_distraction_limit_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float Settings::right_distraction_limit() const {
  // @@protoc_insertion_point(field_get:Settings.right_distraction_limit)
  return right_distraction_limit_;
}
inline void Settings::set_right_distraction_limit(float value) {
  _has_bits_[0] |= 0x00000200u;
  right_distraction_limit_ = value;
  // @@protoc_insertion_point(field_set:Settings.right_distraction_limit)
}

// optional float down_distraction_limit = 12;
inline bool Settings::has_down_distraction_limit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Settings::clear_down_distraction_limit() {
  down_distraction_limit_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float Settings::down_distraction_limit() const {
  // @@protoc_insertion_point(field_get:Settings.down_distraction_limit)
  return down_distraction_limit_;
}
inline void Settings::set_down_distraction_limit(float value) {
  _has_bits_[0] |= 0x00000400u;
  down_distraction_limit_ = value;
  // @@protoc_insertion_point(field_set:Settings.down_distraction_limit)
}

// optional float up_distraction_limit = 13;
inline bool Settings::has_up_distraction_limit() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Settings::clear_up_distraction_limit() {
  up_distraction_limit_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float Settings::up_distraction_limit() const {
  // @@protoc_insertion_point(field_get:Settings.up_distraction_limit)
  return up_distraction_limit_;
}
inline void Settings::set_up_distraction_limit(float value) {
  _has_bits_[0] |= 0x00000800u;
  up_distraction_limit_ = value;
  // @@protoc_insertion_point(field_set:Settings.up_distraction_limit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ActionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ActionType>() {
  return ::ActionType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_settingsu3d2dms_2eproto
