// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: result2u3d.proto

#include "result2u3d.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_result2u3d_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point2f_result2u3d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_result2u3d_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point3f_result2u3d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_result2u3d_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Quaternion_result2u3d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_result2u3d_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Rect_result2u3d_2eproto;
class Point3fDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point3f> _instance;
} _Point3f_default_instance_;
class Point2fDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point2f> _instance;
} _Point2f_default_instance_;
class RectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rect> _instance;
} _Rect_default_instance_;
class QuaternionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Quaternion> _instance;
} _Quaternion_default_instance_;
class ResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Result> _instance;
} _Result_default_instance_;
static void InitDefaultsPoint3f_result2u3d_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Point3f_default_instance_;
    new (ptr) ::Point3f();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Point3f::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Point3f_result2u3d_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint3f_result2u3d_2eproto}, {}};

static void InitDefaultsPoint2f_result2u3d_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Point2f_default_instance_;
    new (ptr) ::Point2f();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Point2f::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Point2f_result2u3d_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint2f_result2u3d_2eproto}, {}};

static void InitDefaultsRect_result2u3d_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Rect_default_instance_;
    new (ptr) ::Rect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rect_result2u3d_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRect_result2u3d_2eproto}, {}};

static void InitDefaultsQuaternion_result2u3d_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Quaternion_default_instance_;
    new (ptr) ::Quaternion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Quaternion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Quaternion_result2u3d_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQuaternion_result2u3d_2eproto}, {}};

static void InitDefaultsResult_result2u3d_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Result_default_instance_;
    new (ptr) ::Result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Result_result2u3d_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsResult_result2u3d_2eproto}, {
      &scc_info_Point3f_result2u3d_2eproto.base,
      &scc_info_Rect_result2u3d_2eproto.base,
      &scc_info_Point2f_result2u3d_2eproto.base,
      &scc_info_Quaternion_result2u3d_2eproto.base,}};

void InitDefaults_result2u3d_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Point3f_result2u3d_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Point2f_result2u3d_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rect_result2u3d_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Quaternion_result2u3d_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Result_result2u3d_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_result2u3d_2eproto[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_result2u3d_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_result2u3d_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_result2u3d_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Point3f, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Point3f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Point3f, x_),
  PROTOBUF_FIELD_OFFSET(::Point3f, y_),
  PROTOBUF_FIELD_OFFSET(::Point3f, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Point2f, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Point2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Point2f, x_),
  PROTOBUF_FIELD_OFFSET(::Point2f, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Rect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Rect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Rect, x_),
  PROTOBUF_FIELD_OFFSET(::Rect, y_),
  PROTOBUF_FIELD_OFFSET(::Rect, width_),
  PROTOBUF_FIELD_OFFSET(::Rect, height_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::Quaternion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Quaternion, x_),
  PROTOBUF_FIELD_OFFSET(::Quaternion, y_),
  PROTOBUF_FIELD_OFFSET(::Quaternion, z_),
  PROTOBUF_FIELD_OFFSET(::Quaternion, w_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::Result, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Result, image_),
  PROTOBUF_FIELD_OFFSET(::Result, mouth_open_),
  PROTOBUF_FIELD_OFFSET(::Result, yawn_),
  PROTOBUF_FIELD_OFFSET(::Result, mouth_open_rate_),
  PROTOBUF_FIELD_OFFSET(::Result, have_mouth_),
  PROTOBUF_FIELD_OFFSET(::Result, left_eye_open_),
  PROTOBUF_FIELD_OFFSET(::Result, right_eye_open_),
  PROTOBUF_FIELD_OFFSET(::Result, have_left_eye_),
  PROTOBUF_FIELD_OFFSET(::Result, have_right_eye_),
  PROTOBUF_FIELD_OFFSET(::Result, left_eye_open_rate_),
  PROTOBUF_FIELD_OFFSET(::Result, right_eye_open_rate_),
  PROTOBUF_FIELD_OFFSET(::Result, left_eye_direction_),
  PROTOBUF_FIELD_OFFSET(::Result, right_eye_direction_),
  PROTOBUF_FIELD_OFFSET(::Result, doze_),
  PROTOBUF_FIELD_OFFSET(::Result, phone_),
  PROTOBUF_FIELD_OFFSET(::Result, phone_bbox_),
  PROTOBUF_FIELD_OFFSET(::Result, smoking_),
  PROTOBUF_FIELD_OFFSET(::Result, cigarette_bbox_),
  PROTOBUF_FIELD_OFFSET(::Result, camera_avaliable_),
  PROTOBUF_FIELD_OFFSET(::Result, name_),
  PROTOBUF_FIELD_OFFSET(::Result, have_face_),
  PROTOBUF_FIELD_OFFSET(::Result, face_bbox_),
  PROTOBUF_FIELD_OFFSET(::Result, head_pose_),
  PROTOBUF_FIELD_OFFSET(::Result, landmarks_),
  PROTOBUF_FIELD_OFFSET(::Result, cpu_utilization_),
  PROTOBUF_FIELD_OFFSET(::Result, mem_occupation_),
  PROTOBUF_FIELD_OFFSET(::Result, age_),
  PROTOBUF_FIELD_OFFSET(::Result, fps_),
  PROTOBUF_FIELD_OFFSET(::Result, gender_),
  PROTOBUF_FIELD_OFFSET(::Result, head_quaternion_),
  PROTOBUF_FIELD_OFFSET(::Result, left_eye_center_),
  PROTOBUF_FIELD_OFFSET(::Result, right_eye_center_),
  PROTOBUF_FIELD_OFFSET(::Result, distraction_),
  0,
  11,
  12,
  31,
  13,
  14,
  15,
  16,
  17,
  19,
  20,
  2,
  3,
  18,
  21,
  4,
  22,
  5,
  23,
  1,
  24,
  6,
  7,
  ~0u,
  25,
  26,
  27,
  28,
  29,
  8,
  9,
  10,
  30,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::Point3f)},
  { 11, 18, sizeof(::Point2f)},
  { 20, 29, sizeof(::Rect)},
  { 33, 42, sizeof(::Quaternion)},
  { 46, 84, sizeof(::Result)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Point3f_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Point2f_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Rect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Quaternion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Result_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_result2u3d_2eproto = {
  {}, AddDescriptors_result2u3d_2eproto, "result2u3d.proto", schemas,
  file_default_instances, TableStruct_result2u3d_2eproto::offsets,
  file_level_metadata_result2u3d_2eproto, 5, file_level_enum_descriptors_result2u3d_2eproto, file_level_service_descriptors_result2u3d_2eproto,
};

const char descriptor_table_protodef_result2u3d_2eproto[] =
  "\n\020result2u3d.proto\"3\n\007Point3f\022\014\n\001x\030\001 \002(\002"
  ":\0010\022\014\n\001y\030\002 \002(\002:\0010\022\014\n\001z\030\003 \002(\002:\0010\"%\n\007Point"
  "2f\022\014\n\001x\030\001 \002(\002:\0010\022\014\n\001y\030\002 \002(\002:\0010\"G\n\004Rect\022\014"
  "\n\001x\030\001 \002(\005:\0010\022\014\n\001y\030\002 \002(\005:\0010\022\020\n\005width\030\003 \002("
  "\005:\0010\022\021\n\006height\030\004 \002(\005:\0010\"8\n\nQuaternion\022\t\n"
  "\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\022\t\n\001w\030\004 \002("
  "\002\"\323\006\n\006Result\022\r\n\005image\030\001 \002(\014\022\031\n\nmouth_ope"
  "n\030\002 \001(\010:\005false\022\023\n\004yawn\030\003 \001(\010:\005false\022\033\n\017m"
  "outh_open_rate\030\004 \001(\002:\002-1\022\031\n\nhave_mouth\030\005"
  " \001(\010:\005false\022\025\n\rleft_eye_open\030\006 \001(\010\022\026\n\016ri"
  "ght_eye_open\030\007 \001(\010\022\025\n\rhave_left_eye\030\010 \001("
  "\010\022\026\n\016have_right_eye\030\t \001(\010\022\032\n\022left_eye_op"
  "en_rate\030\n \001(\002\022\033\n\023right_eye_open_rate\030\013 \001"
  "(\002\022$\n\022left_eye_direction\030\014 \001(\0132\010.Point3f"
  "\022%\n\023right_eye_direction\030\r \001(\0132\010.Point3f\022"
  "\014\n\004doze\030\016 \001(\010\022\r\n\005phone\030\017 \001(\010\022\031\n\nphone_bb"
  "ox\030\020 \001(\0132\005.Rect\022\017\n\007smoking\030\021 \001(\010\022\035\n\016ciga"
  "rette_bbox\030\022 \001(\0132\005.Rect\022\030\n\020camera_avalia"
  "ble\030\023 \001(\010\022\014\n\004name\030\024 \001(\t\022\021\n\thave_face\030\025 \001"
  "(\010\022\030\n\tface_bbox\030\026 \001(\0132\005.Rect\022\033\n\thead_pos"
  "e\030\027 \001(\0132\010.Point3f\022\033\n\tlandmarks\030\030 \003(\0132\010.P"
  "oint2f\022\027\n\017cpu_utilization\030\031 \001(\002\022\026\n\016mem_o"
  "ccupation\030\032 \001(\002\022\013\n\003age\030\033 \001(\r\022\013\n\003fps\030\034 \001("
  "\r\022\027\n\006gender\030\035 \001(\0162\007.GENDER\022$\n\017head_quate"
  "rnion\030\036 \001(\0132\013.Quaternion\022!\n\017left_eye_cen"
  "ter\030\037 \001(\0132\010.Point3f\022\"\n\020right_eye_center\030"
  "  \001(\0132\010.Point3f\022&\n\013distraction\030! \001(\0162\021.D"
  "ISTRACTION_TYPE*1\n\006GENDER\022\010\n\004MALE\020\000\022\n\n\006F"
  "EMALE\020\001\022\t\n\005OTHER\020\002\022\006\n\002NA\020\003*E\n\020DISTRACTIO"
  "N_TYPE\022\010\n\004LEFT\020\000\022\t\n\005RIGHT\020\001\022\006\n\002UP\020\002\022\010\n\004D"
  "OWN\020\003\022\n\n\006NORMAL\020\004"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_result2u3d_2eproto = {
  false, InitDefaults_result2u3d_2eproto, 
  descriptor_table_protodef_result2u3d_2eproto,
  "result2u3d.proto", &assign_descriptors_table_result2u3d_2eproto, 1217,
};

void AddDescriptors_result2u3d_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_result2u3d_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_result2u3d_2eproto = []() { AddDescriptors_result2u3d_2eproto(); return true; }();
const ::google::protobuf::EnumDescriptor* GENDER_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_result2u3d_2eproto);
  return file_level_enum_descriptors_result2u3d_2eproto[0];
}
bool GENDER_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DISTRACTION_TYPE_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_result2u3d_2eproto);
  return file_level_enum_descriptors_result2u3d_2eproto[1];
}
bool DISTRACTION_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Point3f::InitAsDefaultInstance() {
}
class Point3f::HasBitSetters {
 public:
  static void set_has_x(Point3f* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_y(Point3f* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_z(Point3f* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point3f::kXFieldNumber;
const int Point3f::kYFieldNumber;
const int Point3f::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point3f::Point3f()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Point3f)
}
Point3f::Point3f(const Point3f& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:Point3f)
}

void Point3f::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Point3f::~Point3f() {
  // @@protoc_insertion_point(destructor:Point3f)
  SharedDtor();
}

void Point3f::SharedDtor() {
}

void Point3f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point3f& Point3f::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Point3f_result2u3d_2eproto.base);
  return *internal_default_instance();
}


void Point3f::Clear() {
// @@protoc_insertion_point(message_clear_start:Point3f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Point3f::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Point3f*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required float x = 1 [default = 0];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float y = 2 [default = 0];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float z = 3 [default = 0];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_z(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Point3f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Point3f)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float z = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_z(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Point3f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Point3f)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Point3f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Point3f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Point3f)
}

::google::protobuf::uint8* Point3f::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Point3f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Point3f)
  return target;
}

size_t Point3f::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Point3f)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1 [default = 0];
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2 [default = 0];
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 3 [default = 0];
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Point3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Point3f)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x = 1 [default = 0];
    total_size += 1 + 4;

    // required float y = 2 [default = 0];
    total_size += 1 + 4;

    // required float z = 3 [default = 0];
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point3f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Point3f)
  GOOGLE_DCHECK_NE(&from, this);
  const Point3f* source =
      ::google::protobuf::DynamicCastToGenerated<Point3f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Point3f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Point3f)
    MergeFrom(*source);
  }
}

void Point3f::MergeFrom(const Point3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Point3f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point3f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Point3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point3f::CopyFrom(const Point3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Point3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3f::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Point3f::Swap(Point3f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point3f::InternalSwap(Point3f* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::google::protobuf::Metadata Point3f::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_result2u3d_2eproto);
  return ::file_level_metadata_result2u3d_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Point2f::InitAsDefaultInstance() {
}
class Point2f::HasBitSetters {
 public:
  static void set_has_x(Point2f* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_y(Point2f* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point2f::kXFieldNumber;
const int Point2f::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point2f::Point2f()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Point2f)
}
Point2f::Point2f(const Point2f& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Point2f)
}

void Point2f::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point2f::~Point2f() {
  // @@protoc_insertion_point(destructor:Point2f)
  SharedDtor();
}

void Point2f::SharedDtor() {
}

void Point2f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point2f& Point2f::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Point2f_result2u3d_2eproto.base);
  return *internal_default_instance();
}


void Point2f::Clear() {
// @@protoc_insertion_point(message_clear_start:Point2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Point2f::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Point2f*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required float x = 1 [default = 0];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float y = 2 [default = 0];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Point2f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Point2f)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Point2f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Point2f)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Point2f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Point2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Point2f)
}

::google::protobuf::uint8* Point2f::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Point2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Point2f)
  return target;
}

size_t Point2f::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Point2f)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1 [default = 0];
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2 [default = 0];
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Point2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Point2f)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1 [default = 0];
    total_size += 1 + 4;

    // required float y = 2 [default = 0];
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point2f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Point2f)
  GOOGLE_DCHECK_NE(&from, this);
  const Point2f* source =
      ::google::protobuf::DynamicCastToGenerated<Point2f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Point2f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Point2f)
    MergeFrom(*source);
  }
}

void Point2f::MergeFrom(const Point2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Point2f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point2f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Point2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2f::CopyFrom(const Point2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Point2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2f::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Point2f::Swap(Point2f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point2f::InternalSwap(Point2f* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::google::protobuf::Metadata Point2f::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_result2u3d_2eproto);
  return ::file_level_metadata_result2u3d_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rect::InitAsDefaultInstance() {
}
class Rect::HasBitSetters {
 public:
  static void set_has_x(Rect* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_y(Rect* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_width(Rect* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_height(Rect* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rect::kXFieldNumber;
const int Rect::kYFieldNumber;
const int Rect::kWidthFieldNumber;
const int Rect::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rect::Rect()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rect)
}
Rect::Rect(const Rect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:Rect)
}

void Rect::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&x_)) + sizeof(height_));
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:Rect)
  SharedDtor();
}

void Rect::SharedDtor() {
}

void Rect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rect& Rect::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rect_result2u3d_2eproto.base);
  return *internal_default_instance();
}


void Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:Rect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&x_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rect::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rect*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 x = 1 [default = 0];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 y = 2 [default = 0];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 width = 3 [default = 0];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 height = 4 [default = 0];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 y = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 width = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_width(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 height = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_height(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rect)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // required int32 width = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // required int32 height = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Rect)
}

::google::protobuf::uint8* Rect::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // required int32 width = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // required int32 height = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rect)
  return target;
}

size_t Rect::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Rect)
  size_t total_size = 0;

  if (has_x()) {
    // required int32 x = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  if (has_width()) {
    // required int32 width = 3 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  if (has_height()) {
    // required int32 height = 4 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  return total_size;
}
size_t Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 x = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

    // required int32 width = 3 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());

    // required int32 height = 4 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rect)
  GOOGLE_DCHECK_NE(&from, this);
  const Rect* source =
      ::google::protobuf::DynamicCastToGenerated<Rect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rect)
    MergeFrom(*source);
  }
}

void Rect::MergeFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Rect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect::CopyFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Rect::Swap(Rect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rect::InternalSwap(Rect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(width_, other->width_);
  swap(height_, other->height_);
}

::google::protobuf::Metadata Rect::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_result2u3d_2eproto);
  return ::file_level_metadata_result2u3d_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Quaternion::InitAsDefaultInstance() {
}
class Quaternion::HasBitSetters {
 public:
  static void set_has_x(Quaternion* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_y(Quaternion* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_z(Quaternion* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_w(Quaternion* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Quaternion::kXFieldNumber;
const int Quaternion::kYFieldNumber;
const int Quaternion::kZFieldNumber;
const int Quaternion::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Quaternion::Quaternion()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:Quaternion)
}

void Quaternion::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:Quaternion)
  SharedDtor();
}

void Quaternion::SharedDtor() {
}

void Quaternion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Quaternion& Quaternion::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Quaternion_result2u3d_2eproto.base);
  return *internal_default_instance();
}


void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&w_) -
        reinterpret_cast<char*>(&x_)) + sizeof(w_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Quaternion::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Quaternion*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required float x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float z = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_z(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float w = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_w(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Quaternion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Quaternion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_z(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float w = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_w(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Quaternion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Quaternion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Quaternion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // required float w = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->w(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Quaternion)
}

::google::protobuf::uint8* Quaternion::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // required float w = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->w(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Quaternion)
  return target;
}

size_t Quaternion::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Quaternion)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  if (has_w()) {
    // required float w = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Quaternion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

    // required float w = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quaternion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const Quaternion* source =
      ::google::protobuf::DynamicCastToGenerated<Quaternion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Quaternion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Quaternion)
    MergeFrom(*source);
  }
}

void Quaternion::MergeFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      w_ = from.w_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Quaternion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Quaternion::Swap(Quaternion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Quaternion::InternalSwap(Quaternion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(w_, other->w_);
}

::google::protobuf::Metadata Quaternion::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_result2u3d_2eproto);
  return ::file_level_metadata_result2u3d_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Result::InitAsDefaultInstance() {
  ::_Result_default_instance_._instance.get_mutable()->left_eye_direction_ = const_cast< ::Point3f*>(
      ::Point3f::internal_default_instance());
  ::_Result_default_instance_._instance.get_mutable()->right_eye_direction_ = const_cast< ::Point3f*>(
      ::Point3f::internal_default_instance());
  ::_Result_default_instance_._instance.get_mutable()->phone_bbox_ = const_cast< ::Rect*>(
      ::Rect::internal_default_instance());
  ::_Result_default_instance_._instance.get_mutable()->cigarette_bbox_ = const_cast< ::Rect*>(
      ::Rect::internal_default_instance());
  ::_Result_default_instance_._instance.get_mutable()->face_bbox_ = const_cast< ::Rect*>(
      ::Rect::internal_default_instance());
  ::_Result_default_instance_._instance.get_mutable()->head_pose_ = const_cast< ::Point3f*>(
      ::Point3f::internal_default_instance());
  ::_Result_default_instance_._instance.get_mutable()->head_quaternion_ = const_cast< ::Quaternion*>(
      ::Quaternion::internal_default_instance());
  ::_Result_default_instance_._instance.get_mutable()->left_eye_center_ = const_cast< ::Point3f*>(
      ::Point3f::internal_default_instance());
  ::_Result_default_instance_._instance.get_mutable()->right_eye_center_ = const_cast< ::Point3f*>(
      ::Point3f::internal_default_instance());
}
class Result::HasBitSetters {
 public:
  static void set_has_image(Result* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_mouth_open(Result* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_yawn(Result* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_mouth_open_rate(Result* msg) {
    msg->_has_bits_[0] |= 0x80000000u;
  }
  static void set_has_have_mouth(Result* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_left_eye_open(Result* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_right_eye_open(Result* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_have_left_eye(Result* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_have_right_eye(Result* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_left_eye_open_rate(Result* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_right_eye_open_rate(Result* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static const ::Point3f& left_eye_direction(const Result* msg);
  static void set_has_left_eye_direction(Result* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::Point3f& right_eye_direction(const Result* msg);
  static void set_has_right_eye_direction(Result* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_doze(Result* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_phone(Result* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static const ::Rect& phone_bbox(const Result* msg);
  static void set_has_phone_bbox(Result* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_smoking(Result* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static const ::Rect& cigarette_bbox(const Result* msg);
  static void set_has_cigarette_bbox(Result* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_camera_avaliable(Result* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_name(Result* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_have_face(Result* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static const ::Rect& face_bbox(const Result* msg);
  static void set_has_face_bbox(Result* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static const ::Point3f& head_pose(const Result* msg);
  static void set_has_head_pose(Result* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_cpu_utilization(Result* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static void set_has_mem_occupation(Result* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
  static void set_has_age(Result* msg) {
    msg->_has_bits_[0] |= 0x08000000u;
  }
  static void set_has_fps(Result* msg) {
    msg->_has_bits_[0] |= 0x10000000u;
  }
  static void set_has_gender(Result* msg) {
    msg->_has_bits_[0] |= 0x20000000u;
  }
  static const ::Quaternion& head_quaternion(const Result* msg);
  static void set_has_head_quaternion(Result* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static const ::Point3f& left_eye_center(const Result* msg);
  static void set_has_left_eye_center(Result* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static const ::Point3f& right_eye_center(const Result* msg);
  static void set_has_right_eye_center(Result* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_distraction(Result* msg) {
    msg->_has_bits_[0] |= 0x40000000u;
  }
};

const ::Point3f&
Result::HasBitSetters::left_eye_direction(const Result* msg) {
  return *msg->left_eye_direction_;
}
const ::Point3f&
Result::HasBitSetters::right_eye_direction(const Result* msg) {
  return *msg->right_eye_direction_;
}
const ::Rect&
Result::HasBitSetters::phone_bbox(const Result* msg) {
  return *msg->phone_bbox_;
}
const ::Rect&
Result::HasBitSetters::cigarette_bbox(const Result* msg) {
  return *msg->cigarette_bbox_;
}
const ::Rect&
Result::HasBitSetters::face_bbox(const Result* msg) {
  return *msg->face_bbox_;
}
const ::Point3f&
Result::HasBitSetters::head_pose(const Result* msg) {
  return *msg->head_pose_;
}
const ::Quaternion&
Result::HasBitSetters::head_quaternion(const Result* msg) {
  return *msg->head_quaternion_;
}
const ::Point3f&
Result::HasBitSetters::left_eye_center(const Result* msg) {
  return *msg->left_eye_center_;
}
const ::Point3f&
Result::HasBitSetters::right_eye_center(const Result* msg) {
  return *msg->right_eye_center_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Result::kImageFieldNumber;
const int Result::kMouthOpenFieldNumber;
const int Result::kYawnFieldNumber;
const int Result::kMouthOpenRateFieldNumber;
const int Result::kHaveMouthFieldNumber;
const int Result::kLeftEyeOpenFieldNumber;
const int Result::kRightEyeOpenFieldNumber;
const int Result::kHaveLeftEyeFieldNumber;
const int Result::kHaveRightEyeFieldNumber;
const int Result::kLeftEyeOpenRateFieldNumber;
const int Result::kRightEyeOpenRateFieldNumber;
const int Result::kLeftEyeDirectionFieldNumber;
const int Result::kRightEyeDirectionFieldNumber;
const int Result::kDozeFieldNumber;
const int Result::kPhoneFieldNumber;
const int Result::kPhoneBboxFieldNumber;
const int Result::kSmokingFieldNumber;
const int Result::kCigaretteBboxFieldNumber;
const int Result::kCameraAvaliableFieldNumber;
const int Result::kNameFieldNumber;
const int Result::kHaveFaceFieldNumber;
const int Result::kFaceBboxFieldNumber;
const int Result::kHeadPoseFieldNumber;
const int Result::kLandmarksFieldNumber;
const int Result::kCpuUtilizationFieldNumber;
const int Result::kMemOccupationFieldNumber;
const int Result::kAgeFieldNumber;
const int Result::kFpsFieldNumber;
const int Result::kGenderFieldNumber;
const int Result::kHeadQuaternionFieldNumber;
const int Result::kLeftEyeCenterFieldNumber;
const int Result::kRightEyeCenterFieldNumber;
const int Result::kDistractionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Result::Result()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Result)
}
Result::Result(const Result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      landmarks_(from.landmarks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_image()) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_left_eye_direction()) {
    left_eye_direction_ = new ::Point3f(*from.left_eye_direction_);
  } else {
    left_eye_direction_ = nullptr;
  }
  if (from.has_right_eye_direction()) {
    right_eye_direction_ = new ::Point3f(*from.right_eye_direction_);
  } else {
    right_eye_direction_ = nullptr;
  }
  if (from.has_phone_bbox()) {
    phone_bbox_ = new ::Rect(*from.phone_bbox_);
  } else {
    phone_bbox_ = nullptr;
  }
  if (from.has_cigarette_bbox()) {
    cigarette_bbox_ = new ::Rect(*from.cigarette_bbox_);
  } else {
    cigarette_bbox_ = nullptr;
  }
  if (from.has_face_bbox()) {
    face_bbox_ = new ::Rect(*from.face_bbox_);
  } else {
    face_bbox_ = nullptr;
  }
  if (from.has_head_pose()) {
    head_pose_ = new ::Point3f(*from.head_pose_);
  } else {
    head_pose_ = nullptr;
  }
  if (from.has_head_quaternion()) {
    head_quaternion_ = new ::Quaternion(*from.head_quaternion_);
  } else {
    head_quaternion_ = nullptr;
  }
  if (from.has_left_eye_center()) {
    left_eye_center_ = new ::Point3f(*from.left_eye_center_);
  } else {
    left_eye_center_ = nullptr;
  }
  if (from.has_right_eye_center()) {
    right_eye_center_ = new ::Point3f(*from.right_eye_center_);
  } else {
    right_eye_center_ = nullptr;
  }
  ::memcpy(&mouth_open_, &from.mouth_open_,
    static_cast<size_t>(reinterpret_cast<char*>(&mouth_open_rate_) -
    reinterpret_cast<char*>(&mouth_open_)) + sizeof(mouth_open_rate_));
  // @@protoc_insertion_point(copy_constructor:Result)
}

void Result::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Result_result2u3d_2eproto.base);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&left_eye_direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distraction_) -
      reinterpret_cast<char*>(&left_eye_direction_)) + sizeof(distraction_));
  mouth_open_rate_ = -1;
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:Result)
  SharedDtor();
}

void Result::SharedDtor() {
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete left_eye_direction_;
  if (this != internal_default_instance()) delete right_eye_direction_;
  if (this != internal_default_instance()) delete phone_bbox_;
  if (this != internal_default_instance()) delete cigarette_bbox_;
  if (this != internal_default_instance()) delete face_bbox_;
  if (this != internal_default_instance()) delete head_pose_;
  if (this != internal_default_instance()) delete head_quaternion_;
  if (this != internal_default_instance()) delete left_eye_center_;
  if (this != internal_default_instance()) delete right_eye_center_;
}

void Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Result& Result::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Result_result2u3d_2eproto.base);
  return *internal_default_instance();
}


void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmarks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      image_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(left_eye_direction_ != nullptr);
      left_eye_direction_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(right_eye_direction_ != nullptr);
      right_eye_direction_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(phone_bbox_ != nullptr);
      phone_bbox_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(cigarette_bbox_ != nullptr);
      cigarette_bbox_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(face_bbox_ != nullptr);
      face_bbox_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(head_pose_ != nullptr);
      head_pose_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(head_quaternion_ != nullptr);
      head_quaternion_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(left_eye_center_ != nullptr);
      left_eye_center_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(right_eye_center_ != nullptr);
      right_eye_center_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&mouth_open_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&right_eye_open_) -
        reinterpret_cast<char*>(&mouth_open_)) + sizeof(right_eye_open_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&have_left_eye_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&camera_avaliable_) -
        reinterpret_cast<char*>(&have_left_eye_)) + sizeof(camera_avaliable_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&have_face_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distraction_) -
        reinterpret_cast<char*>(&have_face_)) + sizeof(distraction_));
    mouth_open_rate_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Result::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Result*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required bytes image = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_image();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool mouth_open = 2 [default = false];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_mouth_open(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool yawn = 3 [default = false];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_yawn(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float mouth_open_rate = 4 [default = -1];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_mouth_open_rate(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional bool have_mouth = 5 [default = false];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_have_mouth(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool left_eye_open = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_left_eye_open(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool right_eye_open = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_right_eye_open(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool have_left_eye = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_have_left_eye(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool have_right_eye = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_have_right_eye(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float left_eye_open_rate = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 85) goto handle_unusual;
        msg->set_left_eye_open_rate(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float right_eye_open_rate = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 93) goto handle_unusual;
        msg->set_right_eye_open_rate(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional .Point3f left_eye_direction = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Point3f::_InternalParse;
        object = msg->mutable_left_eye_direction();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .Point3f right_eye_direction = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Point3f::_InternalParse;
        object = msg->mutable_right_eye_direction();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bool doze = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_doze(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool phone = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_phone(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .Rect phone_bbox = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Rect::_InternalParse;
        object = msg->mutable_phone_bbox();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bool smoking = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_smoking(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .Rect cigarette_bbox = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Rect::_InternalParse;
        object = msg->mutable_cigarette_bbox();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bool camera_avaliable = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_camera_avaliable(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Result.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool have_face = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_have_face(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .Rect face_bbox = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Rect::_InternalParse;
        object = msg->mutable_face_bbox();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .Point3f head_pose = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 186) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Point3f::_InternalParse;
        object = msg->mutable_head_pose();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .Point2f landmarks = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 194) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::Point2f::_InternalParse;
          object = msg->add_landmarks();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 450 && (ptr += 2));
        break;
      }
      // optional float cpu_utilization = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 205) goto handle_unusual;
        msg->set_cpu_utilization(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float mem_occupation = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 213) goto handle_unusual;
        msg->set_mem_occupation(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 age = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_age(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 fps = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_fps(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .GENDER gender = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::GENDER_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(29, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_gender(static_cast<::GENDER>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .Quaternion head_quaternion = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 242) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Quaternion::_InternalParse;
        object = msg->mutable_head_quaternion();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .Point3f left_eye_center = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 250) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Point3f::_InternalParse;
        object = msg->mutable_left_eye_center();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .Point3f right_eye_center = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 2) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Point3f::_InternalParse;
        object = msg->mutable_right_eye_center();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .DISTRACTION_TYPE distraction = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::DISTRACTION_TYPE_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(33, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_distraction(static_cast<::DISTRACTION_TYPE>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mouth_open = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_mouth_open(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mouth_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool yawn = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_yawn(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &yawn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mouth_open_rate = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_mouth_open_rate(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mouth_open_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool have_mouth = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_have_mouth(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_mouth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool left_eye_open = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_left_eye_open(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_eye_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool right_eye_open = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_right_eye_open(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_eye_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool have_left_eye = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_have_left_eye(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_left_eye_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool have_right_eye = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_have_right_eye(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_right_eye_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float left_eye_open_rate = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (85 & 0xFF)) {
          HasBitSetters::set_has_left_eye_open_rate(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_eye_open_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float right_eye_open_rate = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (93 & 0xFF)) {
          HasBitSetters::set_has_right_eye_open_rate(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_eye_open_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Point3f left_eye_direction = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left_eye_direction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Point3f right_eye_direction = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right_eye_direction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool doze = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_doze(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &doze_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool phone = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_phone(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &phone_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Rect phone_bbox = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phone_bbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool smoking = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_smoking(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &smoking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Rect cigarette_bbox = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cigarette_bbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool camera_avaliable = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_camera_avaliable(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &camera_avaliable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (162 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Result.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool have_face = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_have_face(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_face_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Rect face_bbox = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_face_bbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Point3f head_pose = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (186 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_head_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Point2f landmarks = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (194 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_landmarks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cpu_utilization = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (205 & 0xFF)) {
          HasBitSetters::set_has_cpu_utilization(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_utilization_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mem_occupation = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (213 & 0xFF)) {
          HasBitSetters::set_has_mem_occupation(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mem_occupation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 age = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {
          HasBitSetters::set_has_age(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fps = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {
          HasBitSetters::set_has_fps(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GENDER gender = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (232 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GENDER_IsValid(value)) {
            set_gender(static_cast< ::GENDER >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                29, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Quaternion head_quaternion = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (242 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_head_quaternion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Point3f left_eye_center = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (250 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left_eye_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Point3f right_eye_center = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (258 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right_eye_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DISTRACTION_TYPE distraction = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (264 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DISTRACTION_TYPE_IsValid(value)) {
            set_distraction(static_cast< ::DISTRACTION_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                33, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Result)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes image = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->image(), output);
  }

  // optional bool mouth_open = 2 [default = false];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->mouth_open(), output);
  }

  // optional bool yawn = 3 [default = false];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->yawn(), output);
  }

  // optional float mouth_open_rate = 4 [default = -1];
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->mouth_open_rate(), output);
  }

  // optional bool have_mouth = 5 [default = false];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->have_mouth(), output);
  }

  // optional bool left_eye_open = 6;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->left_eye_open(), output);
  }

  // optional bool right_eye_open = 7;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->right_eye_open(), output);
  }

  // optional bool have_left_eye = 8;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->have_left_eye(), output);
  }

  // optional bool have_right_eye = 9;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->have_right_eye(), output);
  }

  // optional float left_eye_open_rate = 10;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->left_eye_open_rate(), output);
  }

  // optional float right_eye_open_rate = 11;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->right_eye_open_rate(), output);
  }

  // optional .Point3f left_eye_direction = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::left_eye_direction(this), output);
  }

  // optional .Point3f right_eye_direction = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::right_eye_direction(this), output);
  }

  // optional bool doze = 14;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->doze(), output);
  }

  // optional bool phone = 15;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->phone(), output);
  }

  // optional .Rect phone_bbox = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::phone_bbox(this), output);
  }

  // optional bool smoking = 17;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->smoking(), output);
  }

  // optional .Rect cigarette_bbox = 18;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, HasBitSetters::cigarette_bbox(this), output);
  }

  // optional bool camera_avaliable = 19;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->camera_avaliable(), output);
  }

  // optional string name = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Result.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->name(), output);
  }

  // optional bool have_face = 21;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->have_face(), output);
  }

  // optional .Rect face_bbox = 22;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, HasBitSetters::face_bbox(this), output);
  }

  // optional .Point3f head_pose = 23;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, HasBitSetters::head_pose(this), output);
  }

  // repeated .Point2f landmarks = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->landmarks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24,
      this->landmarks(static_cast<int>(i)),
      output);
  }

  // optional float cpu_utilization = 25;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->cpu_utilization(), output);
  }

  // optional float mem_occupation = 26;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->mem_occupation(), output);
  }

  // optional uint32 age = 27;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->age(), output);
  }

  // optional uint32 fps = 28;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->fps(), output);
  }

  // optional .GENDER gender = 29;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      29, this->gender(), output);
  }

  // optional .Quaternion head_quaternion = 30;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, HasBitSetters::head_quaternion(this), output);
  }

  // optional .Point3f left_eye_center = 31;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, HasBitSetters::left_eye_center(this), output);
  }

  // optional .Point3f right_eye_center = 32;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, HasBitSetters::right_eye_center(this), output);
  }

  // optional .DISTRACTION_TYPE distraction = 33;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      33, this->distraction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Result)
}

::google::protobuf::uint8* Result::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes image = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->image(), target);
  }

  // optional bool mouth_open = 2 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->mouth_open(), target);
  }

  // optional bool yawn = 3 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->yawn(), target);
  }

  // optional float mouth_open_rate = 4 [default = -1];
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->mouth_open_rate(), target);
  }

  // optional bool have_mouth = 5 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->have_mouth(), target);
  }

  // optional bool left_eye_open = 6;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->left_eye_open(), target);
  }

  // optional bool right_eye_open = 7;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->right_eye_open(), target);
  }

  // optional bool have_left_eye = 8;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->have_left_eye(), target);
  }

  // optional bool have_right_eye = 9;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->have_right_eye(), target);
  }

  // optional float left_eye_open_rate = 10;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->left_eye_open_rate(), target);
  }

  // optional float right_eye_open_rate = 11;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->right_eye_open_rate(), target);
  }

  // optional .Point3f left_eye_direction = 12;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::left_eye_direction(this), target);
  }

  // optional .Point3f right_eye_direction = 13;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::right_eye_direction(this), target);
  }

  // optional bool doze = 14;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->doze(), target);
  }

  // optional bool phone = 15;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->phone(), target);
  }

  // optional .Rect phone_bbox = 16;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::phone_bbox(this), target);
  }

  // optional bool smoking = 17;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->smoking(), target);
  }

  // optional .Rect cigarette_bbox = 18;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, HasBitSetters::cigarette_bbox(this), target);
  }

  // optional bool camera_avaliable = 19;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->camera_avaliable(), target);
  }

  // optional string name = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Result.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->name(), target);
  }

  // optional bool have_face = 21;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->have_face(), target);
  }

  // optional .Rect face_bbox = 22;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, HasBitSetters::face_bbox(this), target);
  }

  // optional .Point3f head_pose = 23;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, HasBitSetters::head_pose(this), target);
  }

  // repeated .Point2f landmarks = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->landmarks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, this->landmarks(static_cast<int>(i)), target);
  }

  // optional float cpu_utilization = 25;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->cpu_utilization(), target);
  }

  // optional float mem_occupation = 26;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->mem_occupation(), target);
  }

  // optional uint32 age = 27;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->age(), target);
  }

  // optional uint32 fps = 28;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->fps(), target);
  }

  // optional .GENDER gender = 29;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      29, this->gender(), target);
  }

  // optional .Quaternion head_quaternion = 30;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, HasBitSetters::head_quaternion(this), target);
  }

  // optional .Point3f left_eye_center = 31;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, HasBitSetters::left_eye_center(this), target);
  }

  // optional .Point3f right_eye_center = 32;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        32, HasBitSetters::right_eye_center(this), target);
  }

  // optional .DISTRACTION_TYPE distraction = 33;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      33, this->distraction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes image = 1;
  if (has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Point2f landmarks = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->landmarks_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->landmarks(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional string name = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .Point3f left_eye_direction = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *left_eye_direction_);
    }

    // optional .Point3f right_eye_direction = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *right_eye_direction_);
    }

    // optional .Rect phone_bbox = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *phone_bbox_);
    }

    // optional .Rect cigarette_bbox = 18;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cigarette_bbox_);
    }

    // optional .Rect face_bbox = 22;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *face_bbox_);
    }

    // optional .Point3f head_pose = 23;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *head_pose_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .Quaternion head_quaternion = 30;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *head_quaternion_);
    }

    // optional .Point3f left_eye_center = 31;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *left_eye_center_);
    }

    // optional .Point3f right_eye_center = 32;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *right_eye_center_);
    }

    // optional bool mouth_open = 2 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool yawn = 3 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool have_mouth = 5 [default = false];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool left_eye_open = 6;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool right_eye_open = 7;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool have_left_eye = 8;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool have_right_eye = 9;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool doze = 14;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional float left_eye_open_rate = 10;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 4;
    }

    // optional float right_eye_open_rate = 11;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 4;
    }

    // optional bool phone = 15;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 1;
    }

    // optional bool smoking = 17;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool camera_avaliable = 19;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool have_face = 21;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional float cpu_utilization = 25;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional float mem_occupation = 26;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional uint32 age = 27;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age());
    }

    // optional uint32 fps = 28;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fps());
    }

    // optional .GENDER gender = 29;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional .DISTRACTION_TYPE distraction = 33;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->distraction());
    }

    // optional float mouth_open_rate = 4 [default = -1];
    if (cached_has_bits & 0x80000000u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Result)
  GOOGLE_DCHECK_NE(&from, this);
  const Result* source =
      ::google::protobuf::DynamicCastToGenerated<Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Result)
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  landmarks_.MergeFrom(from.landmarks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_left_eye_direction()->::Point3f::MergeFrom(from.left_eye_direction());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_right_eye_direction()->::Point3f::MergeFrom(from.right_eye_direction());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_phone_bbox()->::Rect::MergeFrom(from.phone_bbox());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_cigarette_bbox()->::Rect::MergeFrom(from.cigarette_bbox());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_face_bbox()->::Rect::MergeFrom(from.face_bbox());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_head_pose()->::Point3f::MergeFrom(from.head_pose());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_head_quaternion()->::Quaternion::MergeFrom(from.head_quaternion());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_left_eye_center()->::Point3f::MergeFrom(from.left_eye_center());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_right_eye_center()->::Point3f::MergeFrom(from.right_eye_center());
    }
    if (cached_has_bits & 0x00000800u) {
      mouth_open_ = from.mouth_open_;
    }
    if (cached_has_bits & 0x00001000u) {
      yawn_ = from.yawn_;
    }
    if (cached_has_bits & 0x00002000u) {
      have_mouth_ = from.have_mouth_;
    }
    if (cached_has_bits & 0x00004000u) {
      left_eye_open_ = from.left_eye_open_;
    }
    if (cached_has_bits & 0x00008000u) {
      right_eye_open_ = from.right_eye_open_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      have_left_eye_ = from.have_left_eye_;
    }
    if (cached_has_bits & 0x00020000u) {
      have_right_eye_ = from.have_right_eye_;
    }
    if (cached_has_bits & 0x00040000u) {
      doze_ = from.doze_;
    }
    if (cached_has_bits & 0x00080000u) {
      left_eye_open_rate_ = from.left_eye_open_rate_;
    }
    if (cached_has_bits & 0x00100000u) {
      right_eye_open_rate_ = from.right_eye_open_rate_;
    }
    if (cached_has_bits & 0x00200000u) {
      phone_ = from.phone_;
    }
    if (cached_has_bits & 0x00400000u) {
      smoking_ = from.smoking_;
    }
    if (cached_has_bits & 0x00800000u) {
      camera_avaliable_ = from.camera_avaliable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      have_face_ = from.have_face_;
    }
    if (cached_has_bits & 0x02000000u) {
      cpu_utilization_ = from.cpu_utilization_;
    }
    if (cached_has_bits & 0x04000000u) {
      mem_occupation_ = from.mem_occupation_;
    }
    if (cached_has_bits & 0x08000000u) {
      age_ = from.age_;
    }
    if (cached_has_bits & 0x10000000u) {
      fps_ = from.fps_;
    }
    if (cached_has_bits & 0x20000000u) {
      gender_ = from.gender_;
    }
    if (cached_has_bits & 0x40000000u) {
      distraction_ = from.distraction_;
    }
    if (cached_has_bits & 0x80000000u) {
      mouth_open_rate_ = from.mouth_open_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->landmarks())) return false;
  if (has_left_eye_direction()) {
    if (!this->left_eye_direction_->IsInitialized()) return false;
  }
  if (has_right_eye_direction()) {
    if (!this->right_eye_direction_->IsInitialized()) return false;
  }
  if (has_phone_bbox()) {
    if (!this->phone_bbox_->IsInitialized()) return false;
  }
  if (has_cigarette_bbox()) {
    if (!this->cigarette_bbox_->IsInitialized()) return false;
  }
  if (has_face_bbox()) {
    if (!this->face_bbox_->IsInitialized()) return false;
  }
  if (has_head_pose()) {
    if (!this->head_pose_->IsInitialized()) return false;
  }
  if (has_head_quaternion()) {
    if (!this->head_quaternion_->IsInitialized()) return false;
  }
  if (has_left_eye_center()) {
    if (!this->left_eye_center_->IsInitialized()) return false;
  }
  if (has_right_eye_center()) {
    if (!this->right_eye_center_->IsInitialized()) return false;
  }
  return true;
}

void Result::Swap(Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Result::InternalSwap(Result* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&landmarks_)->InternalSwap(CastToBase(&other->landmarks_));
  image_.Swap(&other->image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(left_eye_direction_, other->left_eye_direction_);
  swap(right_eye_direction_, other->right_eye_direction_);
  swap(phone_bbox_, other->phone_bbox_);
  swap(cigarette_bbox_, other->cigarette_bbox_);
  swap(face_bbox_, other->face_bbox_);
  swap(head_pose_, other->head_pose_);
  swap(head_quaternion_, other->head_quaternion_);
  swap(left_eye_center_, other->left_eye_center_);
  swap(right_eye_center_, other->right_eye_center_);
  swap(mouth_open_, other->mouth_open_);
  swap(yawn_, other->yawn_);
  swap(have_mouth_, other->have_mouth_);
  swap(left_eye_open_, other->left_eye_open_);
  swap(right_eye_open_, other->right_eye_open_);
  swap(have_left_eye_, other->have_left_eye_);
  swap(have_right_eye_, other->have_right_eye_);
  swap(doze_, other->doze_);
  swap(left_eye_open_rate_, other->left_eye_open_rate_);
  swap(right_eye_open_rate_, other->right_eye_open_rate_);
  swap(phone_, other->phone_);
  swap(smoking_, other->smoking_);
  swap(camera_avaliable_, other->camera_avaliable_);
  swap(have_face_, other->have_face_);
  swap(cpu_utilization_, other->cpu_utilization_);
  swap(mem_occupation_, other->mem_occupation_);
  swap(age_, other->age_);
  swap(fps_, other->fps_);
  swap(gender_, other->gender_);
  swap(distraction_, other->distraction_);
  swap(mouth_open_rate_, other->mouth_open_rate_);
}

::google::protobuf::Metadata Result::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_result2u3d_2eproto);
  return ::file_level_metadata_result2u3d_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::Point3f* Arena::CreateMaybeMessage< ::Point3f >(Arena* arena) {
  return Arena::CreateInternal< ::Point3f >(arena);
}
template<> PROTOBUF_NOINLINE ::Point2f* Arena::CreateMaybeMessage< ::Point2f >(Arena* arena) {
  return Arena::CreateInternal< ::Point2f >(arena);
}
template<> PROTOBUF_NOINLINE ::Rect* Arena::CreateMaybeMessage< ::Rect >(Arena* arena) {
  return Arena::CreateInternal< ::Rect >(arena);
}
template<> PROTOBUF_NOINLINE ::Quaternion* Arena::CreateMaybeMessage< ::Quaternion >(Arena* arena) {
  return Arena::CreateInternal< ::Quaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::Result* Arena::CreateMaybeMessage< ::Result >(Arena* arena) {
  return Arena::CreateInternal< ::Result >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
