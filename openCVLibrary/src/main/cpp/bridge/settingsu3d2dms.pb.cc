// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: settingsu3d2dms.proto

#include "settingsu3d2dms.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

class SettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Settings> _instance;
} _Settings_default_instance_;
static void InitDefaultsSettings_settingsu3d2dms_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Settings_default_instance_;
    new (ptr) ::Settings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Settings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Settings_settingsu3d2dms_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSettings_settingsu3d2dms_2eproto}, {}};

void InitDefaults_settingsu3d2dms_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Settings_settingsu3d2dms_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_settingsu3d2dms_2eproto[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_settingsu3d2dms_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_settingsu3d2dms_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_settingsu3d2dms_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Settings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Settings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Settings, actions_),
  PROTOBUF_FIELD_OFFSET(::Settings, name_),
  PROTOBUF_FIELD_OFFSET(::Settings, mouth_thresh_),
  PROTOBUF_FIELD_OFFSET(::Settings, yawn_alarm_time_),
  PROTOBUF_FIELD_OFFSET(::Settings, left_eye_thresh_),
  PROTOBUF_FIELD_OFFSET(::Settings, right_eye_thresh_),
  PROTOBUF_FIELD_OFFSET(::Settings, doze_alarm_time_),
  PROTOBUF_FIELD_OFFSET(::Settings, phone_alarm_time_),
  PROTOBUF_FIELD_OFFSET(::Settings, smoking_alarm_time_),
  PROTOBUF_FIELD_OFFSET(::Settings, left_distraction_limit_),
  PROTOBUF_FIELD_OFFSET(::Settings, right_distraction_limit_),
  PROTOBUF_FIELD_OFFSET(::Settings, down_distraction_limit_),
  PROTOBUF_FIELD_OFFSET(::Settings, up_distraction_limit_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(::Settings)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Settings_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_settingsu3d2dms_2eproto = {
  {}, AddDescriptors_settingsu3d2dms_2eproto, "settingsu3d2dms.proto", schemas,
  file_default_instances, TableStruct_settingsu3d2dms_2eproto::offsets,
  file_level_metadata_settingsu3d2dms_2eproto, 1, file_level_enum_descriptors_settingsu3d2dms_2eproto, file_level_service_descriptors_settingsu3d2dms_2eproto,
};

const char descriptor_table_protodef_settingsu3d2dms_2eproto[] =
  "\n\025settingsu3d2dms.proto\"\346\002\n\010Settings\022\034\n\007"
  "actions\030\001 \003(\0162\013.ActionType\022\014\n\004name\030\002 \001(\t"
  "\022\024\n\014mouth_thresh\030\003 \001(\002\022\027\n\017yawn_alarm_tim"
  "e\030\004 \001(\002\022\027\n\017left_eye_thresh\030\005 \001(\002\022\030\n\020righ"
  "t_eye_thresh\030\006 \001(\002\022\027\n\017doze_alarm_time\030\007 "
  "\001(\002\022\030\n\020phone_alarm_time\030\010 \001(\002\022\032\n\022smoking"
  "_alarm_time\030\t \001(\002\022\036\n\026left_distraction_li"
  "mit\030\n \001(\002\022\037\n\027right_distraction_limit\030\013 \001"
  "(\002\022\036\n\026down_distraction_limit\030\014 \001(\002\022\034\n\024up"
  "_distraction_limit\030\r \001(\002*\270\001\n\nActionType\022"
  "\t\n\005CALIB\020\000\022\n\n\006REGIST\020\001\022\020\n\014MOUTH_THRESH\020\002"
  "\022\023\n\017YAWN_ALARM_TIME\020\003\022\023\n\017LEFT_EYE_THRESH"
  "\020\004\022\024\n\020RIGHT_EYE_THRESH\020\005\022\023\n\017DOZE_ALARM_T"
  "IME\020\006\022\024\n\020PHONE_ALARM_TIME\020\007\022\026\n\022SMOKING_A"
  "LARM_TIME\020\010"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_settingsu3d2dms_2eproto = {
  false, InitDefaults_settingsu3d2dms_2eproto, 
  descriptor_table_protodef_settingsu3d2dms_2eproto,
  "settingsu3d2dms.proto", &assign_descriptors_table_settingsu3d2dms_2eproto, 571,
};

void AddDescriptors_settingsu3d2dms_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_settingsu3d2dms_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_settingsu3d2dms_2eproto = []() { AddDescriptors_settingsu3d2dms_2eproto(); return true; }();
const ::google::protobuf::EnumDescriptor* ActionType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_settingsu3d2dms_2eproto);
  return file_level_enum_descriptors_settingsu3d2dms_2eproto[0];
}
bool ActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Settings::InitAsDefaultInstance() {
}
class Settings::HasBitSetters {
 public:
  static void set_has_name(Settings* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_mouth_thresh(Settings* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_yawn_alarm_time(Settings* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_left_eye_thresh(Settings* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_right_eye_thresh(Settings* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_doze_alarm_time(Settings* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_phone_alarm_time(Settings* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_smoking_alarm_time(Settings* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_left_distraction_limit(Settings* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_right_distraction_limit(Settings* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_down_distraction_limit(Settings* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_up_distraction_limit(Settings* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Settings::kActionsFieldNumber;
const int Settings::kNameFieldNumber;
const int Settings::kMouthThreshFieldNumber;
const int Settings::kYawnAlarmTimeFieldNumber;
const int Settings::kLeftEyeThreshFieldNumber;
const int Settings::kRightEyeThreshFieldNumber;
const int Settings::kDozeAlarmTimeFieldNumber;
const int Settings::kPhoneAlarmTimeFieldNumber;
const int Settings::kSmokingAlarmTimeFieldNumber;
const int Settings::kLeftDistractionLimitFieldNumber;
const int Settings::kRightDistractionLimitFieldNumber;
const int Settings::kDownDistractionLimitFieldNumber;
const int Settings::kUpDistractionLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Settings::Settings()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Settings)
}
Settings::Settings(const Settings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      actions_(from.actions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&mouth_thresh_, &from.mouth_thresh_,
    static_cast<size_t>(reinterpret_cast<char*>(&up_distraction_limit_) -
    reinterpret_cast<char*>(&mouth_thresh_)) + sizeof(up_distraction_limit_));
  // @@protoc_insertion_point(copy_constructor:Settings)
}

void Settings::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Settings_settingsu3d2dms_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mouth_thresh_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&up_distraction_limit_) -
      reinterpret_cast<char*>(&mouth_thresh_)) + sizeof(up_distraction_limit_));
}

Settings::~Settings() {
  // @@protoc_insertion_point(destructor:Settings)
  SharedDtor();
}

void Settings::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Settings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Settings& Settings::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Settings_settingsu3d2dms_2eproto.base);
  return *internal_default_instance();
}


void Settings::Clear() {
// @@protoc_insertion_point(message_clear_start:Settings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&mouth_thresh_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&smoking_alarm_time_) -
        reinterpret_cast<char*>(&mouth_thresh_)) + sizeof(smoking_alarm_time_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&left_distraction_limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&up_distraction_limit_) -
        reinterpret_cast<char*>(&left_distraction_limit_)) + sizeof(up_distraction_limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Settings::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Settings*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .ActionType actions = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
            if (!::ActionType_IsValid(val)) {
              ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
              break;
            }
            msg->add_actions(static_cast<::ActionType>(val));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetEnumValidator(::ActionType_IsValid, msg->mutable_unknown_fields(), 1);
        parser_till_end = ::google::protobuf::internal::PackedValidEnumParser;
        object = msg->mutable_actions();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Settings.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional float mouth_thresh = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_mouth_thresh(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float yawn_alarm_time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_yawn_alarm_time(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float left_eye_thresh = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_left_eye_thresh(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float right_eye_thresh = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_right_eye_thresh(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float doze_alarm_time = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_doze_alarm_time(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float phone_alarm_time = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_phone_alarm_time(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float smoking_alarm_time = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 77) goto handle_unusual;
        msg->set_smoking_alarm_time(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float left_distraction_limit = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 85) goto handle_unusual;
        msg->set_left_distraction_limit(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float right_distraction_limit = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 93) goto handle_unusual;
        msg->set_right_distraction_limit(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float down_distraction_limit = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 101) goto handle_unusual;
        msg->set_down_distraction_limit(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float up_distraction_limit = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 109) goto handle_unusual;
        msg->set_up_distraction_limit(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Settings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Settings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ActionType actions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ActionType_IsValid(value)) {
            add_actions(static_cast< ::ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::ActionType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_actions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Settings.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mouth_thresh = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_mouth_thresh(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mouth_thresh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float yawn_alarm_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_yawn_alarm_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yawn_alarm_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float left_eye_thresh = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_left_eye_thresh(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_eye_thresh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float right_eye_thresh = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_right_eye_thresh(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_eye_thresh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float doze_alarm_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_doze_alarm_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &doze_alarm_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float phone_alarm_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_phone_alarm_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phone_alarm_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float smoking_alarm_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (77 & 0xFF)) {
          HasBitSetters::set_has_smoking_alarm_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &smoking_alarm_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float left_distraction_limit = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (85 & 0xFF)) {
          HasBitSetters::set_has_left_distraction_limit(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_distraction_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float right_distraction_limit = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (93 & 0xFF)) {
          HasBitSetters::set_has_right_distraction_limit(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_distraction_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float down_distraction_limit = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (101 & 0xFF)) {
          HasBitSetters::set_has_down_distraction_limit(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &down_distraction_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float up_distraction_limit = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (109 & 0xFF)) {
          HasBitSetters::set_has_up_distraction_limit(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &up_distraction_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Settings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Settings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Settings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Settings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ActionType actions = 1;
  for (int i = 0, n = this->actions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->actions(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Settings.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional float mouth_thresh = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->mouth_thresh(), output);
  }

  // optional float yawn_alarm_time = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->yawn_alarm_time(), output);
  }

  // optional float left_eye_thresh = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->left_eye_thresh(), output);
  }

  // optional float right_eye_thresh = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->right_eye_thresh(), output);
  }

  // optional float doze_alarm_time = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->doze_alarm_time(), output);
  }

  // optional float phone_alarm_time = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->phone_alarm_time(), output);
  }

  // optional float smoking_alarm_time = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->smoking_alarm_time(), output);
  }

  // optional float left_distraction_limit = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->left_distraction_limit(), output);
  }

  // optional float right_distraction_limit = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->right_distraction_limit(), output);
  }

  // optional float down_distraction_limit = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->down_distraction_limit(), output);
  }

  // optional float up_distraction_limit = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->up_distraction_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Settings)
}

::google::protobuf::uint8* Settings::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Settings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ActionType actions = 1;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1, this->actions_, target);

  cached_has_bits = _has_bits_[0];
  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Settings.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional float mouth_thresh = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->mouth_thresh(), target);
  }

  // optional float yawn_alarm_time = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->yawn_alarm_time(), target);
  }

  // optional float left_eye_thresh = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->left_eye_thresh(), target);
  }

  // optional float right_eye_thresh = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->right_eye_thresh(), target);
  }

  // optional float doze_alarm_time = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->doze_alarm_time(), target);
  }

  // optional float phone_alarm_time = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->phone_alarm_time(), target);
  }

  // optional float smoking_alarm_time = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->smoking_alarm_time(), target);
  }

  // optional float left_distraction_limit = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->left_distraction_limit(), target);
  }

  // optional float right_distraction_limit = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->right_distraction_limit(), target);
  }

  // optional float down_distraction_limit = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->down_distraction_limit(), target);
  }

  // optional float up_distraction_limit = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->up_distraction_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Settings)
  return target;
}

size_t Settings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Settings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ActionType actions = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->actions_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->actions(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional float mouth_thresh = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float yawn_alarm_time = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float left_eye_thresh = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float right_eye_thresh = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float doze_alarm_time = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float phone_alarm_time = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float smoking_alarm_time = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional float left_distraction_limit = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float right_distraction_limit = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float down_distraction_limit = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float up_distraction_limit = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Settings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Settings)
  GOOGLE_DCHECK_NE(&from, this);
  const Settings* source =
      ::google::protobuf::DynamicCastToGenerated<Settings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Settings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Settings)
    MergeFrom(*source);
  }
}

void Settings::MergeFrom(const Settings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Settings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mouth_thresh_ = from.mouth_thresh_;
    }
    if (cached_has_bits & 0x00000004u) {
      yawn_alarm_time_ = from.yawn_alarm_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      left_eye_thresh_ = from.left_eye_thresh_;
    }
    if (cached_has_bits & 0x00000010u) {
      right_eye_thresh_ = from.right_eye_thresh_;
    }
    if (cached_has_bits & 0x00000020u) {
      doze_alarm_time_ = from.doze_alarm_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      phone_alarm_time_ = from.phone_alarm_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      smoking_alarm_time_ = from.smoking_alarm_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      left_distraction_limit_ = from.left_distraction_limit_;
    }
    if (cached_has_bits & 0x00000200u) {
      right_distraction_limit_ = from.right_distraction_limit_;
    }
    if (cached_has_bits & 0x00000400u) {
      down_distraction_limit_ = from.down_distraction_limit_;
    }
    if (cached_has_bits & 0x00000800u) {
      up_distraction_limit_ = from.up_distraction_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Settings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Settings::CopyFrom(const Settings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Settings::IsInitialized() const {
  return true;
}

void Settings::Swap(Settings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Settings::InternalSwap(Settings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  actions_.InternalSwap(&other->actions_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mouth_thresh_, other->mouth_thresh_);
  swap(yawn_alarm_time_, other->yawn_alarm_time_);
  swap(left_eye_thresh_, other->left_eye_thresh_);
  swap(right_eye_thresh_, other->right_eye_thresh_);
  swap(doze_alarm_time_, other->doze_alarm_time_);
  swap(phone_alarm_time_, other->phone_alarm_time_);
  swap(smoking_alarm_time_, other->smoking_alarm_time_);
  swap(left_distraction_limit_, other->left_distraction_limit_);
  swap(right_distraction_limit_, other->right_distraction_limit_);
  swap(down_distraction_limit_, other->down_distraction_limit_);
  swap(up_distraction_limit_, other->up_distraction_limit_);
}

::google::protobuf::Metadata Settings::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_settingsu3d2dms_2eproto);
  return ::file_level_metadata_settingsu3d2dms_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::Settings* Arena::CreateMaybeMessage< ::Settings >(Arena* arena) {
  return Arena::CreateInternal< ::Settings >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
