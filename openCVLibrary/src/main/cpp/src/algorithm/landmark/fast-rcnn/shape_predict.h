//
// Created by slam on 18-10-17.
//

#ifndef HEAD_INFO_SHAPE_PREDICT_H
#define HEAD_INFO_SHAPE_PREDICT_H

#include <iostream>
#include <memory>
#include <opencv2/opencv.hpp>
#include "net.h"

class ShapePredictor{
public:
    explicit ShapePredictor(const std::string& model_path);
    std::vector<cv::Point2f> predict(const cv::Mat &img, const cv::Rect &face);
    const std::vector<cv::Point2f>& GetStandardFace()const{
        return standard_face_;
    }
private:
    std::shared_ptr<ncnn::Net> net_;
    std::vector<cv::Point2f> standard_face_{82};
    float meanshape[164] = {
            7.030535320389519338e-02, 2.866308819176152656e-01,
            7.125263572275604418e-02, 3.954020723322457798e-01,
            7.850747540942534797e-02, 5.146348640181591660e-01,
            1.118024742345236633e-01, 6.160653396085373767e-01,
            1.604599554837583264e-01, 7.088876183305005130e-01,
            2.247658694512196798e-01, 7.912668608759300115e-01,
            3.020918590534656945e-01, 8.620055171566951557e-01,
            3.914618257308391525e-01, 9.179647576064063896e-01,
            4.974332982099009537e-01, 9.434651868679340136e-01,
            6.034047706889634766e-01, 9.179647576064021708e-01,
            6.927747373663385444e-01, 8.620055171566924912e-01,
            7.701007269685877787e-01, 7.912668608759305666e-01,
            8.344066409360482162e-01, 7.088876183304996248e-01,
            8.830641221852777445e-01, 6.160653396085357114e-01,
            9.163591210103748663e-01, 5.146348640181577228e-01,
            9.236139606970509286e-01, 3.954020723322457243e-01,
            9.245612432159133753e-01, 2.866308819176158207e-01,
            2.093628870557386890e-01, 1.498149725743878891e-01,
            2.568506350016815931e-01, 1.018415139242316581e-01,
            3.116782037383524773e-01, 9.337689178436667237e-02,
            3.669691918664123031e-01, 9.786220511627735652e-02,
            4.207442218829462455e-01, 1.110447132048422852e-01,
            4.190365239164950961e-01, 1.475745060631803440e-01,
            3.661020579564442379e-01, 1.377848125671820856e-01,
            3.126292537042465458e-01, 1.328541106846527209e-01,
            2.596764969235749732e-01, 1.374676982193944186e-01,
            5.741223745368607689e-01, 1.110447132048415358e-01,
            6.278974045533942672e-01, 9.786220511627741203e-02,
            6.831883926814535934e-01, 9.337689178436638093e-02,
            7.380159614181223127e-01, 1.018415139242315193e-01,
            7.855037093640642176e-01, 1.498149725743871952e-01,
            7.351900994962268232e-01, 1.374676982193946129e-01,
            6.822373427155559167e-01, 1.328541106846530817e-01,
            6.287645384633606671e-01, 1.377848125671817248e-01,
            5.758300725033131950e-01, 1.475745060631812877e-01,
            4.974332982099017308e-01, 2.457493463126574906e-01,
            4.974332982099029521e-01, 3.021612164333340456e-01,
            4.974332982099012868e-01, 3.581903024560298965e-01,
            4.974332982099032296e-01, 4.145976774334402259e-01,
            4.275580534821188938e-01, 4.918028597061653850e-01,
            4.622481064925167416e-01, 4.917699265942409581e-01,
            4.974332982099024525e-01, 4.934191168533362259e-01,
            5.326184899272884410e-01, 4.917699265942394038e-01,
            5.673085429376868438e-01, 4.918028597061704366e-01,
            2.611065770500569094e-01, 2.533075779052791354e-01,
            2.920101873462517816e-01, 2.428670087388569154e-01,
            3.257810765933966679e-01, 2.375293425415389015e-01,
            3.610478968707682701e-01, 2.387428379557132441e-01,
            3.924727788659445049e-01, 2.489308185490171910e-01,
            3.602797847139593834e-01, 2.584674646337656867e-01,
            3.263822982295385144e-01, 2.628703930687327217e-01,
            2.933673034252929912e-01, 2.607447600166679091e-01,
            6.023938175538591233e-01, 2.489308185490151926e-01,
            6.338186995490383557e-01, 2.387428379557152147e-01,
            6.690855198264028525e-01, 2.375293425415373749e-01,
            7.028564090735507364e-01, 2.428670087388572207e-01,
            7.337600193697462192e-01, 2.533075779052777476e-01,
            7.014992929945096378e-01, 2.607447600166667989e-01,
            6.684842981902647807e-01, 2.628703930687316670e-01,
            6.345868117058417468e-01, 2.584674646337651871e-01,
            3.725716041006184587e-01, 6.682262331912303122e-01,
            4.096751400516074892e-01, 6.188633380643404625e-01,
            4.668058740181413868e-01, 5.872262064306328355e-01,
            4.974332982099024525e-01, 5.921844564335259076e-01,
            5.280607224016613532e-01, 5.872262064306337237e-01,
            5.851914563681956949e-01, 6.188633380643387971e-01,
            6.222949923191904986e-01, 6.682262331912294240e-01,
            5.930301564697584293e-01, 7.075229939193818929e-01,
            5.521682113144302795e-01, 7.350871889173692386e-01,
            4.974332982099025080e-01, 7.465347326088530577e-01,
            4.426983851053745700e-01, 7.350871889173721252e-01,
            4.018364399500489736e-01, 7.075229939193843354e-01,
            3.841984039724661293e-01, 6.675438945065861329e-01,
            4.469469783346453617e-01, 6.344522431963818265e-01,
            4.974332982099020084e-01, 6.277460014465775506e-01,
            5.479196180851596543e-01, 6.344522431963824927e-01,
            6.106681924473406076e-01, 6.675438945065874652e-01,
            5.462345474714858096e-01, 6.937224066475302653e-01,
            4.974332982099005096e-01, 7.011811820824846997e-01,
            4.486320489483178187e-01, 6.937224066475304873e-01,
            3.289695432707011036e-01, 2.508700396076793959e-01,
            6.658970531491025246e-01, 2.508700396076787298e-01
    };
};

#endif //HEAD_INFO_SHAPE_PREDICT_H
